# source: https://eu1.prisma.sh/public-roanbite-523/campaign/dev
# timestamp: Sat May 12 2018 10:42:23 GMT+0500 (PKT)

type AggregateCampaign {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Campaign implements Node {
  id: ID!
  isPublished: Boolean!
  name: String!
  imgUrl: String!
}

"""A connection to a list of items."""
type CampaignConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CampaignEdge]!
  aggregate: AggregateCampaign!
}

input CampaignCreateInput {
  isPublished: Boolean
  name: String!
  imgUrl: String!
}

"""An edge in a connection."""
type CampaignEdge {
  """The item at the end of the edge."""
  node: Campaign!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CampaignOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  name_ASC
  name_DESC
  imgUrl_ASC
  imgUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CampaignPreviousValues {
  id: ID!
  isPublished: Boolean!
  name: String!
  imgUrl: String!
}

type CampaignSubscriptionPayload {
  mutation: MutationType!
  node: Campaign
  updatedFields: [String!]
  previousValues: CampaignPreviousValues
}

input CampaignSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CampaignSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CampaignSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CampaignSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CampaignWhereInput
}

input CampaignUpdateInput {
  isPublished: Boolean
  name: String
  imgUrl: String
}

input CampaignWhereInput {
  """Logical AND on all given filters."""
  AND: [CampaignWhereInput!]

  """Logical OR on all given filters."""
  OR: [CampaignWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CampaignWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  imgUrl: String

  """All values that are not equal to given value."""
  imgUrl_not: String

  """All values that are contained in given list."""
  imgUrl_in: [String!]

  """All values that are not contained in given list."""
  imgUrl_not_in: [String!]

  """All values less than the given value."""
  imgUrl_lt: String

  """All values less than or equal the given value."""
  imgUrl_lte: String

  """All values greater than the given value."""
  imgUrl_gt: String

  """All values greater than or equal the given value."""
  imgUrl_gte: String

  """All values containing the given string."""
  imgUrl_contains: String

  """All values not containing the given string."""
  imgUrl_not_contains: String

  """All values starting with the given string."""
  imgUrl_starts_with: String

  """All values not starting with the given string."""
  imgUrl_not_starts_with: String

  """All values ending with the given string."""
  imgUrl_ends_with: String

  """All values not ending with the given string."""
  imgUrl_not_ends_with: String
}

input CampaignWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCampaign(data: CampaignCreateInput!): Campaign!
  updateCampaign(data: CampaignUpdateInput!, where: CampaignWhereUniqueInput!): Campaign
  deleteCampaign(where: CampaignWhereUniqueInput!): Campaign
  upsertCampaign(where: CampaignWhereUniqueInput!, create: CampaignCreateInput!, update: CampaignUpdateInput!): Campaign!
  updateManyCampaigns(data: CampaignUpdateInput!, where: CampaignWhereInput): BatchPayload!
  deleteManyCampaigns(where: CampaignWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign]!
  campaign(where: CampaignWhereUniqueInput!): Campaign
  campaignsConnection(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampaignConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  campaign(where: CampaignSubscriptionWhereInput): CampaignSubscriptionPayload
}
